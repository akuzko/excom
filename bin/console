#!/usr/bin/env ruby

require "bundler/setup"
require "excom"

Excom::Sentry.deny_with :unauthorized

class Show < Excom::Service
  use :sentry, class: 'MySentry'
  use :caching
  use :dry_types

  attribute :foo, Dry::Types['integer']

  def execute!
    {foo: foo}
  end
end

class MySentry < Excom::Sentry
  def execute?
    foo != 5
  end

  def save?
    sentry(:save).execute?
  end
end

class MyErrors < Hash
  def add(key, message)
    (self[key] ||= []) << message
  end
end

class Save < Excom::Service
  use :status
  use :sentry, delegate: [:threshold]
  use :assertions
  use :errors, errors_class: MyErrors

  args :foo
  opts :bar, :baz

  def foo
    super || 6
  end

  def execute!
    result { foo * 2 }
    assert { foo > bar }
    errors.add(:foo, 'invalid') if foo > 5
  end

  def threshold
    0
  end

  sentry do
    def execute?
      foo != 6
    end

    deny_with :unprocessable_entity do
      def execute?
        foo > 0
      end

      def bar?
        bar && bar > threshold
      end
    end
  end
end

require "pry"
Pry.start
